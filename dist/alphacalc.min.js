/**
 * AlphaCalc 2.2: A modular calculator library for Webflow
 *
 * A powerful, flexible calculator library designed for Webflow projects.
 * This enhanced version offers a simplified API, improved performance,
 * better maintainability, configurable debounce, and loading indicators.
 *
 * @author JP Dionisio
 * @website https://dionisio.jp/
 * @version 2.2.0
 * @license MIT
 *
 * @ai-models
 * - Claude 3.7 Sonnet by Anthropic
 * - ChatGPT o3-mini-high by OpenAI
 *
 * @development-notes
 * Collaborative development with AI assistance to enhance
 * library design, documentation, and code quality.
 */
var t,e;t="undefined"!=typeof window?window:this,e=function(){const t={selectors:{input:"[data-alphacalc-input]",getter:"[data-alphacalc-output], [data-alphacalc-from]",setter:"[data-alphacalc-set], [data-alphacalc-to]",submit:'[data-alphacalc-submit], [data-alphacalc-element="submit"], [data-alphacalc-calculate], [data-alphacalc-element="calculate"]',calculator:"[data-alphacalc-calculator]",loading:'[data-alphacalc-element="loading"]'},decimal:{input:4,display:2},features:{autoCalculate:!0,debug:!1,debounceTime:50,allowLegacyAttributes:!0,showDeprecationWarnings:!0},formatting:{style:"decimal",useGrouping:!0}},e={mergeDeep(...t){const e=t=>t&&"object"==typeof t;return t.reduce(((t,a)=>e(t)&&e(a)?(Object.keys(a).forEach((i=>{const l=t[i],s=a[i];Array.isArray(l)&&Array.isArray(s)?t[i]=l.concat(...s):e(l)&&e(s)?t[i]=this.mergeDeep(l,s):t[i]=s})),t):a),{})},debounce(t,e){let a;return function(...i){const l=this;clearTimeout(a),a=setTimeout((()=>t.apply(l,i)),e)}},parseNumeric(t){if(null==t||""===t)return 0;if(!0===t)return 1;if(!1===t)return 0;if("string"==typeof t){const e=t.replace(/[^0-9.-]+/g,""),a=parseFloat(e);return isFinite(a)?a:0}const e=parseFloat(t);return isFinite(e)?e:0},formatNumber(t,e={}){const{decimals:a=2,style:i="decimal",useGrouping:l=!0}=e;return new Intl.NumberFormat(void 0,{style:i,minimumFractionDigits:a,maximumFractionDigits:a,useGrouping:l}).format(t)}};class a{constructor(){this.events={}}on(t,e){return this.events[t]||(this.events[t]=[]),this.events[t].push(e),this}off(t,e){return this.events[t]?(e?this.events[t]=this.events[t].filter((t=>t!==e)):delete this.events[t],this):this}emit(t,e){return this.events[t]?(this.events[t].forEach((t=>t(e))),this):this}}class i{constructor(t){this.calculator=t}evaluate(t,e={}){const a=t.replace(/[^\w\s+\-*/.()%,]/g,"");try{const t=Object.keys(e),i=Object.values(e);let l=new Function(...t,`return ${a};`)(...i);return isFinite(l)?parseFloat(l.toFixed(this.calculator.config.decimal.input)):(this.calculator.debugLog(`Formula result is not finite: ${l}`),0)}catch(t){return this.calculator.debugLog("Error evaluating formula:",t),0}}}class l{constructor(t){this.calculator=t,this.inputValues=new Map,this.inputElements=new Map,this.listeners=new Map,this.formulaInputs=[]}init(){const{container:t,config:e}=this.calculator,a=`${e.selectors.input}:not([type="submit"])`;return Array.from(t.querySelectorAll(a)).forEach((t=>this.registerInput(t))),this}registerInput(t){const e=this.getCellId(t);if(!e)return void this.calculator.debugLog("Input missing cell identifier",t);this.inputElements.set(e,t);const a=this.getElementType(t);let i=this.getElementValue(t);return this.inputValues.set(e,i),"input"!==a||!t.hasAttribute("data-alphacalc-value")||"text"!==t.type&&"number"!==t.type||(t.value=i,t._alphaCalcInitialized=!0,this.calculator.debugLog(`Updated input ${e} visible value to ${i}`)),t.hasAttribute("data-alphacalc-formula")?(this.formulaInputs.push(t),"input"===a&&(t.readOnly=!0)):this.attachListener(t,e),this}getCellId(t){return t.hasAttribute("data-alphacalc-input")&&""!==t.getAttribute("data-alphacalc-input")?t.getAttribute("data-alphacalc-input"):this.calculator.config.features.allowLegacyAttributes&&t.hasAttribute("data-alphacalc-cell")?(this.calculator.config.features.showDeprecationWarnings&&this.calculator.debugLog("Deprecated: data-alphacalc-cell is deprecated. Please use data-alphacalc-input instead.",t),t.getAttribute("data-alphacalc-cell")):null}getElementType(t){const e=t.getAttribute("data-alphacalc-element");if(e&&["input","select","radio","checkbox"].includes(e))return e;const a=t.tagName.toLowerCase();if("select"===a)return"select";if("input"===a){const e=t.getAttribute("type");return"radio"===e?"radio":"checkbox"===e?"checkbox":"input"}return"input"}getElementValue(t){const a=this.getElementType(t);let i=0;if("select"===a)i=this.getSelectValue(t);else if("radio"===a||"checkbox"===a)i=this.getToggleValue(t);else{const a=t.hasAttribute("data-alphacalc-value")&&(!t._alphaCalcInitialized||"text"!==t.type&&"number"!==t.type)?t.getAttribute("data-alphacalc-value"):t.value;i=e.parseNumeric(a)}return i=this.clampValue(i,t),i}getSelectValue(t){if(""===t.value||null===t.value){if(t.hasAttribute("data-alphacalc-default"))return e.parseNumeric(t.getAttribute("data-alphacalc-default"));const a=Array.from(t.options).find((t=>""!==t.value&&null!==t.value));return a?e.parseNumeric(a.value):0}return e.parseNumeric(t.value)}getToggleValue(t){if(!t.checked)return 0;const a=t.hasAttribute("data-alphacalc-value")?t.getAttribute("data-alphacalc-value"):t.value;return e.parseNumeric(a)}clampValue(t,e){let a=t;if(e.hasAttribute("data-alphacalc-min")){const t=parseFloat(e.getAttribute("data-alphacalc-min"));isNaN(t)||(a=Math.max(a,t))}if(e.hasAttribute("data-alphacalc-max")){const t=parseFloat(e.getAttribute("data-alphacalc-max"));isNaN(t)||(a=Math.min(a,t))}return a}attachListener(t,e){const a=this.getElementType(t),i="select"===a||"radio"===a||"checkbox"===a?"change":"input",l=()=>{"radio"===a&&t.checked&&t.name&&this.handleRadioChange(t);const i=this.getElementValue(t);this.inputValues.set(e,i),this.calculator.events.emit("value:changed",{cellId:e,value:i}),this.calculator.config.features.autoCalculate&&this.calculator.debouncedCalculate()};t.addEventListener(i,l),this.listeners.set(t,{type:i,fn:l})}handleRadioChange(t){t.name&&this.calculator.container.querySelectorAll(`input[type="radio"][name="${t.name}"]`).forEach((e=>{if(e!==t){const t=this.getCellId(e);t&&(this.inputValues.set(t,0),this.calculator.debugLog(`Setting radio ${t} to 0 (unchecked)`))}}))}setValue(t,a){this.inputValues.set(t,a);const i=this.inputElements.get(t);if(i){const t=this.getElementType(i);if("select"===t){const t=Array.from(i.options).find((t=>e.parseNumeric(t.value)===a));t&&(i.value=t.value)}else if("radio"===t||"checkbox"===t){const t=this.getToggleValue(i);i.checked=Math.abs(t-a)<.001}else i.value=a;i.dispatchEvent(new Event("change",{bubbles:!0}))}return this.calculator.events.emit("value:changed",{cellId:t,value:a}),this}destroy(){return this.listeners.forEach(((t,e)=>{e.removeEventListener(t.type,t.fn)})),this.listeners.clear(),this.inputValues.clear(),this.inputElements.clear(),this.formulaInputs=[],this}}class s{constructor(t){this.calculator=t,this.getterElements=[],this.listeners=new Map}init(){const{container:t,config:e}=this.calculator;return this.getterElements=Array.from(t.querySelectorAll(e.selectors.getter)),e.features.allowLegacyAttributes&&this.initLegacyDisplays(),this.getterElements.forEach((t=>this.initGetter(t))),this}initLegacyDisplays(){Array.from(this.calculator.container.querySelectorAll("[data-alphacalc-display]")).forEach((t=>{const e=t.getAttribute("data-alphacalc-display");t.hasAttribute("data-alphacalc-output")||t.hasAttribute("data-alphacalc-from")||(t.setAttribute("data-alphacalc-output",e),this.getterElements.includes(t)||this.getterElements.push(t),this.calculator.config.features.showDeprecationWarnings&&this.calculator.debugLog("Deprecated: data-alphacalc-display is deprecated. Use data-alphacalc-output instead.",t))})),this.calculator.config.features.showDeprecationWarnings&&Array.from(this.calculator.container.querySelectorAll("[data-alphacalc-from]")).forEach((t=>{this.calculator.debugLog("Deprecated: data-alphacalc-from is deprecated. Use data-alphacalc-output instead.",t)}))}initGetter(t){const e=t.hasAttribute("data-alphacalc-output")?t.getAttribute("data-alphacalc-output"):t.getAttribute("data-alphacalc-from");if(!e)return void this.calculator.debugLog("Getter missing source attribute",t);const a="INPUT"===t.tagName||"TEXTAREA"===t.tagName||"SELECT"===t.tagName,i=e.startsWith("=")||/[\+\-\*\/\(\)%]/.test(e);if(t._alphaCalcGetterInfo={sourceId:e,isInput:a,isFormula:i},t._alphaCalcGetterInfo.isFormula){const i=this.calculator.inputManager.getCellId(t);i&&(this.calculator.inputManager.formulaInputs.push(t),this.calculator.config.features.debug&&this.calculator.debugLog(`Registered formula input: ${i} with formula: ${e}`,{isExplicitFormula:e.startsWith("=")}),a&&"INPUT"===t.tagName&&(t.readOnly=!0))}a&&t.hasAttribute("data-alphacalc-bidirectional")&&"true"===t.getAttribute("data-alphacalc-bidirectional")&&this.attachBidirectionalListener(t),this.calculator.events.on("value:changed",(({cellId:a})=>{(a===e||t._alphaCalcGetterInfo.isFormula)&&this.updateGetter(t)})),this.updateGetter(t)}attachBidirectionalListener(t){const a=()=>{const a=t._alphaCalcGetterInfo.sourceId;if(a.startsWith("="))return;const i=e.parseNumeric(t.value);this.calculator.inputManager.setValue(a,i),this.calculator.config.features.autoCalculate&&this.calculator.debouncedCalculate()};t.addEventListener("change",a),this.listeners.set(t,a)}updateGetter(t){if(!t._alphaCalcGetterInfo)return;const{sourceId:a,isInput:i,isFormula:l}=t._alphaCalcGetterInfo;let s=0;if(l){const t=a.startsWith("=")?a.substring(1):a;s=this.calculator.formulaEngine.evaluate(t,Object.fromEntries(this.calculator.inputManager.inputValues))}else s=this.calculator.inputManager.inputValues.get(a)||0;s=this.calculator.inputManager.clampValue(s,t);const r=t.hasAttribute("data-alphacalc-decimals")?parseInt(t.getAttribute("data-alphacalc-decimals")):this.calculator.config.decimal.display;if(i){const a="INPUT"===t.tagName&&"number"===t.getAttribute("type");t.value=a?s:e.formatNumber(s,{decimals:r})}else t.textContent=e.formatNumber(s,{decimals:r});const c=this.calculator.inputManager.getCellId(t);c&&this.calculator.inputManager.inputValues.set(c,s)}showActiveClass(){return this.getterElements.forEach((t=>{if(t.hasAttribute("data-alphacalc-classactive")){const e=t.getAttribute("data-alphacalc-classactive")||"is-active";t.classList.add(e)}})),this}hideActiveClass(){return this.getterElements.forEach((t=>{if(t.hasAttribute("data-alphacalc-classactive")){const e=t.getAttribute("data-alphacalc-classactive")||"is-active";t.classList.remove(e)}})),this}destroy(){return this.listeners.forEach(((t,e)=>{e.removeEventListener("change",t)})),this.listeners.clear(),this.getterElements=[],this}}class r{constructor(t){this.calculator=t,this.groups=new Map}init(){const{container:t}=this.calculator,e=Array.from(t.querySelectorAll("[data-alphacalc-group]")),a=new Map;return e.forEach((t=>{const e=t.getAttribute("data-alphacalc-group");e&&(this.calculator.inputManager.getCellId(t)?(a.has(e)||a.set(e,[]),a.get(e).push(t)):this.calculator.debugLog("Group element missing cell ID",t))})),a.forEach(((t,e)=>{this.createGroup(e,t)})),this}createGroup(t,e){const a=e.every((t=>"radio"===this.calculator.inputManager.getElementType(t))),i=a&&e.every((t=>t.name===e[0].name)),l=a&&i;this.groups.set(t,{name:t,elements:e,isRadioGroup:l,value:0}),this.updateGroupValue(t),e.forEach((e=>{const a=this.calculator.inputManager.getCellId(e);this.calculator.events.on("value:changed",(({cellId:e})=>{a===e&&this.updateGroupValue(t)}))})),this.calculator.debugLog(`Group "${t}" initialized with ${e.length} elements`)}updateGroupValue(t){if(!this.groups.has(t))return void this.calculator.debugLog(`Group "${t}" not found`);const e=this.groups.get(t);let a=0;if(e.isRadioGroup){const t=e.elements.find((t=>t.checked));t&&(a=this.calculator.inputManager.getElementValue(t))}else a=e.elements.reduce(((t,e)=>{const a=this.calculator.inputManager.getElementType(e);return"radio"===a||"checkbox"===a?e.checked?t+this.calculator.inputManager.getElementValue(e):t:t+this.calculator.inputManager.getElementValue(e)}),0);e.value=a,this.calculator.inputManager.inputValues.set(t,a),this.calculator.events.emit("value:changed",{cellId:t,value:a}),this.calculator.debugLog(`Group "${t}" updated with value ${a}`)}getGroupValue(t){return this.groups.has(t)?this.groups.get(t).value:0}getGroupElements(t){return this.groups.has(t)?this.groups.get(t).elements:[]}getGroupActiveElements(t){return this.groups.has(t)?this.groups.get(t).elements.filter((t=>{const e=this.calculator.inputManager.getElementType(t);return"radio"!==e&&"checkbox"!==e||t.checked})):[]}isRadioGroup(t){return!!this.groups.has(t)&&this.groups.get(t).isRadioGroup}}class c{constructor(t){this.calculator=t,this.setters=[],this.listeners=new Map}init(){const{container:t,config:e}=this.calculator;return this.setters=Array.from(t.querySelectorAll(e.selectors.setter)),this.setters.forEach((t=>this.initSetter(t))),this}initSetter(t){const e=t.getAttribute("data-alphacalc-set"),a=t.getAttribute("data-alphacalc-value");if(!e||null===a)return void this.calculator.debugLog("Setter missing required attributes",t);const i=t=>{t.preventDefault(),this.setValue(e,a),this.calculator.config.features.autoCalculate&&this.calculator.debouncedCalculate()};t.addEventListener("click",i),this.listeners.set(t,i)}setValue(t,a){if(this.calculator.groupManager.groups.has(t))return void this.setGroupValue(t,a);const i=e.parseNumeric(a);this.calculator.inputManager.setValue(t,i)}setGroupValue(t,a){const i=this.calculator.groupManager.groups.get(t);if(i.isRadioGroup){const l=i.elements.find((t=>{const i=t.hasAttribute("data-alphacalc-value")?t.getAttribute("data-alphacalc-value"):t.value;return i===a||Math.abs(e.parseNumeric(i)-e.parseNumeric(a))<.001}));l?(l.checked=!0,l.dispatchEvent(new Event("change",{bubbles:!0}))):this.calculator.debugLog(`No radio with value ${a} found in group ${t}`)}else this.calculator.debugLog("Setting values for non-radio groups not fully implemented")}destroy(){return this.listeners.forEach(((t,e)=>{e.removeEventListener("click",t)})),this.listeners.clear(),this.setters=[],this}}class u{constructor(t){this.calculator=t,this.submitElements=[],this.forms=[],this.listeners=new Map}init(){const{container:t,config:e}=this.calculator;return this.submitElements=Array.from(t.querySelectorAll(e.selectors.submit)),this.submitElements.forEach((t=>{const e=e=>{const a=t.hasAttribute("data-alphacalc-formsubmit")&&"true"===t.getAttribute("data-alphacalc-formsubmit"),i=t.closest("form");!i||a||this.isFormSubmitAllowed(i)||e.preventDefault(),this.calculator.debouncedCalculate(),a&&i&&this.calculator.debugLog("Form submit button clicked, form will submit after calculation")};t.addEventListener("click",e),this.listeners.set(t,e)})),this.handleRelatedForms(),this}handleRelatedForms(){const{container:t}=this.calculator;"form"===t.tagName.toLowerCase()&&this.forms.push(t);const e=Array.from(t.querySelectorAll("form"));this.forms.push(...e);let a=t.parentElement;for(;a;)"form"===a.tagName.toLowerCase()&&this.forms.push(a),a=a.parentElement;this.forms=[...new Set(this.forms)],this.forms.forEach((t=>{const e=e=>{this.isFormSubmitAllowed(t)||(e.preventDefault(),this.calculator.debouncedCalculate())};t.addEventListener("submit",e),this.listeners.set(t,e)})),this.calculator.debugLog(`Found and handled ${this.forms.length} related forms`)}isFormSubmitAllowed(t){return!!t&&(t.hasAttribute("data-alphacalc-allowsubmit")?"true"===t.getAttribute("data-alphacalc-allowsubmit"):!!this.calculator.container.hasAttribute("data-alphacalc-allowsubmit")&&"true"===this.calculator.container.getAttribute("data-alphacalc-allowsubmit"))}destroy(){return this.listeners.forEach(((t,e)=>{const a="form"===e.tagName.toLowerCase()?"submit":"click";e.removeEventListener(a,t)})),this.listeners.clear(),this.submitElements=[],this.forms=[],this}}class n{constructor(t){this.calculator=t,this.loadingElements=[]}init(){const{container:t,config:e}=this.calculator;return this.loadingElements=Array.from(t.querySelectorAll(e.selectors.loading)),this.calculator.debugLog(`Found ${this.loadingElements.length} loading elements`),this}showLoading(){return this.loadingElements.forEach((t=>{const e=t.getAttribute("data-alphacalc-classactive")||"is-active";t.classList.add(e)})),this}hideLoading(){return this.loadingElements.forEach((t=>{const e=t.getAttribute("data-alphacalc-classactive")||"is-active";t.classList.remove(e)})),this}destroy(){return this.hideLoading(),this.loadingElements=[],this}}class o{constructor(o,h={}){if(!o)throw new Error("AlphaCalc: A valid container element is required.");this.container=o,this.name=o.getAttribute("data-alphacalc-calculator")||"unnamed",this.config=e.mergeDeep({},t,h);const d=o.getAttribute("data-alphacalc-debounce");if(d&&!isNaN(parseInt(d))&&(this.config.features.debounceTime=parseInt(d)),void 0===h.debug){const t=window.location.hostname.includes("webflow.io"),e="true"===new URLSearchParams(window.location.search).get("dev");this.config.features.debug=t||e}return this.events=new a,this.inputManager=new l(this),this.formulaEngine=new i(this),this.outputManager=new s(this),this.groupManager=new r(this),this.setterManager=new c(this),this.submitManager=new u(this),this.loadingManager=new n(this),this.calculations=[],this.debouncedCalculate=(()=>{let t=null;return()=>{this.loadingManager.showLoading(),this.outputManager.showActiveClass(),t&&clearTimeout(t),t=setTimeout((()=>{this.calculate(),setTimeout((()=>{this.loadingManager.hideLoading(),this.outputManager.hideActiveClass()}),50)}),this.config.features.debounceTime)}})(),this.initialize(),this.debugLog(`Calculator initialized with debounce time: ${this.config.features.debounceTime}ms`),this}initialize(){return this.inputManager.init(),this.groupManager.init(),this.outputManager.init(),this.setterManager.init(),this.submitManager.init(),this.loadingManager.init(),this.config.features.debug&&this.initNameGuides(),this.calculate(),this}calculate(){return this.debugLog(`Processing ${this.inputManager.formulaInputs.length} formula inputs`),this.config.features.debug&&this.debugLog("Formula detection test: ",{"A1 * B1":/[\+\-\*\/\(\)%]/.test("A1 * B1"),"A1+B1":/[\+\-\*\/\(\)%]/.test("A1+B1"),"N1 * CG10":/[\+\-\*\/\(\)%]/.test("N1 * CG10")}),this.inputManager.formulaInputs.forEach((t=>{const e=this.inputManager.getCellId(t);if(!e)return void this.debugLog("Skipping formula input: No cell ID found",t);let a=null,i=0,l="";if(this.config.features.debug&&this.debugLog(`Processing input ${e}`,{hasFormula:t.hasAttribute("data-alphacalc-formula"),hasOutput:t.hasAttribute("data-alphacalc-output"),hasFrom:t.hasAttribute("data-alphacalc-from"),element:t}),t.hasAttribute("data-alphacalc-formula"))a=t.getAttribute("data-alphacalc-formula"),l="formula-attribute",this.debugLog(`Found formula via data-alphacalc-formula: ${a}`);else{if(!t.hasAttribute("data-alphacalc-output")&&!t.hasAttribute("data-alphacalc-from"))return void this.debugLog(`No formula attributes found for ${e}`,t);{const e=t.hasAttribute("data-alphacalc-output")?"data-alphacalc-output":"data-alphacalc-from",i=t.getAttribute(e);if(!i)return void this.debugLog(`Empty ${e} attribute`,t);if(this.debugLog(`Processing ${e} value: "${i}"`),i.startsWith("="))a=i.substring(1),l="equals-prefix",this.debugLog(`Found formula via equals prefix: ${a}`);else{const t=/[\+\-\*\/\(\)%]/;if(this.debugLog(`Testing for formula operators in: "${i}"`),this.debugLog(`Contains operators: ${t.test(i)}`),!t.test(i))return void this.debugLog(`Not a formula, treating as reference: ${i}`);a=i,l="auto-detected",this.debugLog(`Auto-detected formula without = prefix: ${a}`)}}}if(a){this.debugLog(`Evaluating formula (${l}): ${a}`);const t=Object.fromEntries(this.inputManager.inputValues);this.config.features.debug&&this.debugLog("Available values for formula:",t);try{i=this.formulaEngine.evaluate(a,t),this.debugLog(`Formula result: ${a} = ${i}`),this.inputManager.setValue(e,i)}catch(t){this.debugLog(`Error evaluating formula ${a}:`,t)}}})),this.calculations.forEach(((t,e)=>{try{this.debugLog(`Running custom calculation function #${e+1}`),t(this.inputManager.inputValues,this.container)}catch(t){this.debugLog(`Error in custom calculation function #${e+1}:`,t)}})),this.config.features.debug&&this.logDebugInfo(),this}initNameGuides(){this.container.querySelectorAll("label").forEach((t=>{const e=t.querySelector("input")||t.querySelector("select")||t.querySelector('input[type="radio"]')||t.querySelector('input[type="checkbox"]');if(!e)return;const a=this.inputManager.getCellId(e);a&&t.setAttribute("data-alphacalc-nameguide",a)})),this.debugLog("Name guides initialized on labels.")}logDebugInfo(){const t=Array.from(this.inputManager.inputValues.entries()).map((([t,e])=>{const a=this.inputManager.inputElements.get(t);if(!a)return null;const i=this.inputManager.getElementType(a),l=a.getAttribute("data-name")||"",s=a.hasAttribute("data-alphacalc-formula")?a.getAttribute("data-alphacalc-formula"):"",r=a.hasAttribute("data-alphacalc-group")?a.getAttribute("data-alphacalc-group"):"",c="radio"!==i&&"checkbox"!==i||a.checked;return{Cell:t,Name:l,Type:i.toUpperCase(),Group:r||"-",Value:e,Active:c?"✓":"❌",Formula:s||"-"}})).filter(Boolean),e=Array.from(this.groupManager.groups.entries()).map((([t,e])=>({Group:t,Type:e.isRadioGroup?"Radio":"Mixed",Value:e.value,Elements:e.elements.length,Active:this.groupManager.getGroupActiveElements(t).length}))),a=this.outputManager.getterElements.map((t=>{if(!t._alphaCalcGetterInfo)return null;const{sourceId:e,isInput:a,isFormula:i}=t._alphaCalcGetterInfo,l=t.id||(t.name?`name="${t.name}"`:t.tagName);let s="";s=a?t.value:t.textContent;let r="";if(i){const t=e.startsWith("=")?e.substring(1):e;r=this.formulaEngine.evaluate(t,Object.fromEntries(this.inputManager.inputValues))}else r=this.inputManager.inputValues.get(e)||0;let c=t.hasAttribute("data-alphacalc-output")?"output":t.hasAttribute("data-alphacalc-from")?"from":"display";return{Element:l,Type:t.tagName,Source:e,Attribute:c,Formula:i?"YES":"NO",SourceValue:r,DisplayedValue:s,Decimals:t.hasAttribute("data-alphacalc-decimals")?t.getAttribute("data-alphacalc-decimals"):this.config.decimal.display}})).filter(Boolean),i=`AlphaCalc [${this.name}]`;console.group(i),console.log("Inputs:"),console.table(t),e.length>0&&(console.log("Groups:"),console.table(e)),a.length>0&&(console.log("Outputs:"),console.table(a)),console.groupEnd()}debugLog(t,e=null){if(!this.config.features.debug)return;const a=`AlphaCalc [${this.name}]: `;e?console.log(`${a}${t}`,e):console.log(`${a}${t}`)}addCalculation(t){return"function"==typeof t&&this.calculations.push(t),this}reinit(){return this.destroy(),this.initialize(),this.debugLog("Calculator reinitialized"),this}destroy(){return this.inputManager.destroy(),this.outputManager.destroy(),this.setterManager.destroy(),this.submitManager.destroy(),this.loadingManager.destroy(),this.calculations=[],this.debugLog("Calculator destroyed"),this}setValue(t,e){return this.inputManager.setValue(t,e),this}getValue(t){return this.inputManager.inputValues.get(t)||0}getAllValues(){return Object.fromEntries(this.inputManager.inputValues)}}return o.globalConfig={},o.instances=[],o.getByName=function(t){return o.instances.find((e=>e.name.toLowerCase()===t.toLowerCase()))},o.getAllInstances=function(){return[...o.instances]},o.calculateAll=function(){o.instances.forEach((t=>t.calculate()))},o.initAll=function(t={}){const a=[...document.querySelectorAll("[data-alphacalc-calculator]"),...document.querySelectorAll('[data-alphacalc-element="calculator"]:not([data-alphacalc-calculator])')];if(0!==a.length)return console.log(`AlphaCalc: Found ${a.length} calculator(s) on the page.`),o.instances.forEach((t=>t.destroy())),o.instances=[],a.forEach((a=>{const i={};a.hasAttribute("data-alphacalc-debug")&&(i.features=i.features||{},i.features.debug="true"===a.getAttribute("data-alphacalc-debug")),a.hasAttribute("data-alphacalc-defaultfromdecimals")&&(i.decimal=i.decimal||{},i.decimal.display=parseInt(a.getAttribute("data-alphacalc-defaultfromdecimals"))),a.hasAttribute("data-alphacalc-defaultinputdecimals")&&(i.decimal=i.decimal||{},i.decimal.input=parseInt(a.getAttribute("data-alphacalc-defaultinputdecimals")));const l=e.mergeDeep({},t,i),s=new o(a,l);o.instances.push(s)})),o.instances;console.log("AlphaCalc: No calculators found on the page.")},o.init=function(t,e={}){if(!t)return console.error("AlphaCalc.init: No element provided"),null;const a=new o(t,e);return o.instances.push(a),a},"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>o.initAll())):setTimeout((()=>o.initAll()),0),document.addEventListener("AlphaCalcReady",(()=>o.initAll())),o},"object"==typeof module&&"object"==typeof module.exports?module.exports=e():"function"==typeof define&&define.amd?define(e):(t.AlphaCalc=e(),window.AlphaCalc=t.AlphaCalc);
